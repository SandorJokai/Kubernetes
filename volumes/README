                  ###############Project-name: how to build a docker image in kubernetes ###############

Project manifestation: Everytime, when it's need, we can create a container temporarily using a pod and create other things
inside. In the followings, I created a docker container and a debian10-based system running apache webserver on one of them
and a mariadb DB on another. In additionally, it can be shown how amazingly kubernetes and docker can work together.
It is true, the volume has got only a very little part of it, but I wanted to show it as well. In this case, kubernetes
volumes were allowed to use the docker inside a running container. (using a socket)

                          #################### PROJECT INSTRUCTION STEPS: ####################

Once I launched the docker pod (container) in kubernetes using the demo-vol.yml, I executed a command to get into the shell:

kubectl exec -it docker -- sh

These following steps which I executed in the docker container: 
    - mkdir docker #It's important to make an isolated directory, otherwise it would have been worked.
    - cd docker
    - apk add curl nano #We got an alpine environment from the docker image and now we need to download curl and nano
    - curl -o Dockerfile curl -o Dockerfile https://raw.githubusercontent.com/SandorJokai/k8s/master/volumes/Dockerfile
      #Then I downloaded the Dockerfile from here(my github repo)
    - docker image build -t projectname . #It's time to build my image called just simple: projectname
      #### But before, I had to modify the ENV GITKEY directive with my proper personal github access token hash
    - curl -o docker-compose.yml https://raw.githubusercontent.com/SandorJokai/k8s/master/volumes/docker-compose.yml
      #Now it's time to download the docker-compose file
    - apk add docker-compose #docker-compose is decoupled from docker engine, so needed to download it
    - finally just hit this command: docker-compose up -d
    - Let's find out what is my cluster ip: from a new shell typing `minikube ip`
    - And check on a browser tab (it must shown the wordpress default site)

After all those things we did, we can push into a repository, in my case: in the docker hub
    
